{"version":3,"file":"block-renderer.cjs.production.min.js","sources":["../src/GutenbergBlock.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\nimport Interweave from 'interweave';\nimport { BlockNodeProps, InnerBlocks } from './types';\n\ninterface HtmlBlockProps {\n  html: string;\n}\n\nconst HtmlBlock = ({ html }: HtmlBlockProps): JSX.Element => {\n  return <Interweave noWrap={true} content={html} />;\n};\n\nexport default function GutenbergBlock({\n  blockName,\n  innerHTML,\n  blockMap,\n  blocksUtilizingSubtree,\n  children,\n  ...props\n}: BlockNodeProps): JSX.Element {\n  let ConcreteBlockComponent: React.ElementType;\n\n  if (blockMap[blockName]) {\n    ConcreteBlockComponent = blockMap[blockName];\n  } else {\n    ConcreteBlockComponent = HtmlBlock;\n  }\n\n  // base case A: static block or raw html\n  if (innerHTML) {\n    return <ConcreteBlockComponent {...props} html={innerHTML} blockName={blockName} />;\n  }\n\n  // base case B: dynamic block with no more descedents\n  if (!children || children.length === 0) {\n    return <ConcreteBlockComponent {...props} blockName={blockName} />;\n  }\n\n  // recursive case: dynamic block with more descedents.\n  return (\n    <ConcreteBlockComponent\n      {...(blocksUtilizingSubtree.includes(blockName) && children ? { tree: children } : null)}\n      {...props}\n    >\n      {children.map((child, key) => (\n        <GutenbergBlock\n          blockName={child.blockName}\n          innerHTML={child.innerHTML}\n          {...child.attrs}\n          index={key}\n          key={key}\n          blockMap={blockMap}\n          blocksUtilizingSubtree={blocksUtilizingSubtree}\n        >\n          {child.innerBlocks as InnerBlocks[]}\n        </GutenbergBlock>\n      ))}\n    </ConcreteBlockComponent>\n  );\n}\n","import React from 'react';\nimport GutenbergBlock from './GutenbergBlock';\nimport { InnerBlocks } from './types';\n\ninterface BlockRendererProps {\n  blockMap: Record<string, React.ComponentType<Record<string, unknown>>>;\n  innerBlocks: InnerBlocks[];\n}\n\nexport const BlockRenderer: React.FC<BlockRendererProps> = ({\n  blockMap,\n  innerBlocks,\n}: BlockRendererProps) => {\n  return (\n    <GutenbergBlock blocksUtilizingSubtree={[]} blockMap={blockMap} blockName=\"fragment\">\n      {innerBlocks}\n    </GutenbergBlock>\n  );\n};\n\nexport default BlockRenderer;\n"],"names":["HtmlBlock","React","Interweave","noWrap","content","html","GutenbergBlock","ConcreteBlockComponent","blockName","innerHTML","blockMap","blocksUtilizingSubtree","children","props","length","includes","tree","map","child","key","attrs","index","innerBlocks","BlockRenderer"],"mappings":"+LAQMA,EAAY,mBACTC,gBAACC,GAAWC,QAAQ,EAAMC,UADdC,iBAIGC,SAQlBC,EAPJC,IAAAA,UACAC,IAAAA,UACAC,IAAAA,SACAC,IAAAA,uBACAC,IAAAA,SACGC,wNAKDN,EADEG,EAASF,GACcE,EAASF,GAETR,EAIvBS,EACKR,gBAACM,mBAA2BM,GAAOR,KAAMI,EAAWD,UAAWA,KAInEI,GAAgC,IAApBA,EAASE,OAMxBb,gBAACM,mBACMI,EAAuBI,SAASP,IAAcI,EAAW,CAAEI,KAAMJ,GAAa,KAC/EC,GAEHD,EAASK,KAAI,SAACC,EAAOC,UACpBlB,gBAACK,iBACCE,UAAWU,EAAMV,UACjBC,UAAWS,EAAMT,WACbS,EAAME,OACVC,MAAOF,EACPA,IAAKA,EACLT,SAAUA,EACVC,uBAAwBA,IAEvBO,EAAMI,iBAnBNrB,gBAACM,mBAA2BM,GAAOL,UAAWA,SC1B5Ce,EAA8C,mBAKvDtB,gBAACK,GAAeK,uBAAwB,GAAID,WAJ9CA,SAIkEF,UAAU,cAH5Ec"}