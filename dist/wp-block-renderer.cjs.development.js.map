{"version":3,"file":"wp-block-renderer.cjs.development.js","sources":["../src/GutenbergBlock.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\nimport Interweave from 'interweave';\nimport { BlockNodeProps, InnerBlocks } from './types';\n\ninterface HtmlBlockProps {\n  html: string;\n}\n\nconst HtmlBlock = ({ html }: HtmlBlockProps): JSX.Element => {\n  return <Interweave noWrap={true} content={html} />;\n};\n\nexport default function GutenbergBlock({\n  blockName,\n  innerHTML,\n  blockMap,\n  blocksUtilizingSubtree,\n  children,\n  ...props\n}: BlockNodeProps): JSX.Element {\n  let ConcreteBlockComponent: React.ElementType;\n\n  if (blockMap[blockName]) {\n    ConcreteBlockComponent = blockMap[blockName];\n  } else {\n    ConcreteBlockComponent = HtmlBlock;\n  }\n\n  // base case A: static block or raw html\n  if (innerHTML) {\n    return <ConcreteBlockComponent {...props} html={innerHTML} blockName={blockName} />;\n  }\n\n  // base case B: dynamic block with no more descedents\n  if (!children || children.length === 0) {\n    return <ConcreteBlockComponent {...props} blockName={blockName} />;\n  }\n\n  // recursive case: dynamic block with more descedents.\n  return (\n    <ConcreteBlockComponent\n      {...(blocksUtilizingSubtree.includes(blockName) && children ? { tree: children } : null)}\n      {...props}\n    >\n      {children.map((child, key) => (\n        <GutenbergBlock\n          blockName={child.blockName}\n          innerHTML={child.innerHTML}\n          {...child.attrs}\n          index={key}\n          key={key}\n          blockMap={blockMap}\n          blocksUtilizingSubtree={blocksUtilizingSubtree}\n        >\n          {child.innerBlocks as InnerBlocks[]}\n        </GutenbergBlock>\n      ))}\n    </ConcreteBlockComponent>\n  );\n}\n","import React from 'react';\nimport GutenbergBlock from './GutenbergBlock';\nimport { InnerBlocks } from './types';\n\ninterface BlockRendererProps {\n  blockMap: Record<string, React.ComponentType<Record<string, unknown>>>;\n  innerBlocks: InnerBlocks[];\n}\n\nexport const BlockRenderer: React.FC<BlockRendererProps> = ({\n  blockMap,\n  innerBlocks,\n}: BlockRendererProps) => {\n  return (\n    <GutenbergBlock blocksUtilizingSubtree={[]} blockMap={blockMap} blockName=\"fragment\">\n      {innerBlocks}\n    </GutenbergBlock>\n  );\n};\n\nexport default BlockRenderer;\n"],"names":["HtmlBlock","html","React","Interweave","noWrap","content","GutenbergBlock","blockName","innerHTML","blockMap","blocksUtilizingSubtree","children","props","ConcreteBlockComponent","length","includes","tree","map","child","key","attrs","index","innerBlocks","BlockRenderer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,SAAS,GAAG,SAAZA,SAAY;MAAGC,YAAAA;AACnB,SAAOC,mBAAA,CAACC,UAAD;AAAYC,IAAAA,MAAM,EAAE;AAAMC,IAAAA,OAAO,EAAEJ;GAAnC,CAAP;AACD,CAFD;;SAIwBK;MACtBC,kBAAAA;MACAC,kBAAAA;MACAC,iBAAAA;MACAC,+BAAAA;MACAC,iBAAAA;MACGC;;AAEH,MAAIC,sBAAJ;;AAEA,MAAIJ,QAAQ,CAACF,SAAD,CAAZ,EAAyB;AACvBM,IAAAA,sBAAsB,GAAGJ,QAAQ,CAACF,SAAD,CAAjC;AACD,GAFD,MAEO;AACLM,IAAAA,sBAAsB,GAAGb,SAAzB;AACD;;;AAGD,MAAIQ,SAAJ,EAAe;AACb,WAAON,mBAAA,CAACW,sBAAD,oBAA4BD;AAAOX,MAAAA,IAAI,EAAEO;AAAWD,MAAAA,SAAS,EAAEA;MAA/D,CAAP;AACD;;;AAGD,MAAI,CAACI,QAAD,IAAaA,QAAQ,CAACG,MAAT,KAAoB,CAArC,EAAwC;AACtC,WAAOZ,mBAAA,CAACW,sBAAD,oBAA4BD;AAAOL,MAAAA,SAAS,EAAEA;MAA9C,CAAP;AACD;;;AAGD,SACEL,mBAAA,CAACW,sBAAD,oBACOH,sBAAsB,CAACK,QAAvB,CAAgCR,SAAhC,KAA8CI,QAA9C,GAAyD;AAAEK,IAAAA,IAAI,EAAEL;AAAR,GAAzD,GAA8E,MAC/EC,MAFN,EAIGD,QAAQ,CAACM,GAAT,CAAa,UAACC,KAAD,EAAQC,GAAR;AAAA,WACZjB,mBAAA,CAACI,cAAD;AACEC,MAAAA,SAAS,EAAEW,KAAK,CAACX;AACjBC,MAAAA,SAAS,EAAEU,KAAK,CAACV;OACbU,KAAK,CAACE;AACVC,MAAAA,KAAK,EAAEF;AACPA,MAAAA,GAAG,EAAEA;AACLV,MAAAA,QAAQ,EAAEA;AACVC,MAAAA,sBAAsB,EAAEA;MAP1B,EASGQ,KAAK,CAACI,WATT,CADY;AAAA,GAAb,CAJH,CADF;AAoBD;;IClDYC,aAAa,GAAiC,SAA9CA,aAA8C;MACzDd,gBAAAA;MACAa,mBAAAA;AAEA,SACEpB,mBAAA,CAACI,cAAD;AAAgBI,IAAAA,sBAAsB,EAAE;AAAID,IAAAA,QAAQ,EAAEA;AAAUF,IAAAA,SAAS,EAAC;GAA1E,EACGe,WADH,CADF;AAKD,CATM;;;;;"}